# -*- coding: utf-8 -*-
"""EDA_Week03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DzfRbczM0T_ZGCZjb47EE9wWd7utDBf3
"""

import matplotlib.pyplot as plt
x_axis = [1,2,3]
y_axis = [2,4,1]
#plotting lines to the axes
plt.plot(x_axis, y_axis)
#setting x axis label of the current axis
plt.xlabel('x - axis')
#setting y axis label of the current axis
plt.ylabel('y - axis')
#setting title
plt.title('Sample graph!')
plt.show()

import matplotlib.pyplot as plt
#line 1 points
x1 = [10,20,30]
y1 = [20,40,10]
#line 2 points
x2 = [10,20,30]
y2 = [40,10,30]
#setting x axis label of the current axis
plt.xlabel('x - axis')
#setting y axis label of the current axis
plt.ylabel('y - axis')
#setting title
plt.title('Two or more lines with different widths and colors with suitable legends ')
plt.plot(x1,y1, color='blue', linewidth = 3,  label = 'line1-width-3')
plt.plot(x2,y2, color='red', linewidth = 5,  label = 'line2-width-5')
# show a legend on the plot
plt.legend()
plt.show()

import matplotlib.pyplot as plt
x = [1,4,5,6,7]
y = [2,6,3,6,3]
#plotting the points
plt.plot(x, y, color='red', linestyle='dashdot', linewidth = 3, marker='o', markerfacecolor='blue', markersize=12)
#setting y-limits of the current axes
plt.ylim(1,8)
#setting x-limits of the current axes
plt.xlim(1,8)
#setting x axis label of the current axis.
plt.xlabel('x - axis')
#setting y axis label of the current axis
plt.ylabel('y - axis')
#setting title
plt.title('Display marker')
plt.show()

import matplotlib.pyplot as plt
x = ['Java', 'Python', 'PHP', 'JS', 'C#', 'C++']
popularity = [22.2, 17.6, 8.8, 8, 7.7, 6.7]
x_pos = [i for i, _ in enumerate(x)]
plt.barh(x_pos, popularity, color='green')
plt.xlabel("Popularity")
plt.ylabel("Languages")
plt.title("PopularitY of Programming Language\n" + "Worldwide, Oct 2017 compared to a year ago")
plt.yticks(x_pos, x)
#turning on the grid
plt.minorticks_on()
plt.grid(which='major', linestyle='-', linewidth='0.5', color='red')
#customizing the minor grid
plt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')
plt.show()

from pandas import DataFrame
import matplotlib.pyplot as plt
import numpy as np
a=np.array([[4,8,5,7,6],[2,3,4,2,6],[4,7,4,7,8],[2,6,4,8,6],[2,4,3,3,2]])
df=DataFrame(a, columns=['a','b','c','d','e'], index=[2,4,6,8,10])
df.plot(kind='bar')
#turning on the grid
plt.minorticks_on()
plt.grid(which='major', linestyle='-', linewidth='0.5', color='green')
plt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
#loading data from the CSV file into a DataFrame
df = pd.read_csv('/content/medal.csv')
#extracting necessary columns from the DataFrame
country_data = df["country"]
medal_data = df["gold_medal"]
#defining colors for the pie chart
colors = ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#8c564b"]
#defining how much each slice will be exploded out
explode = (0.1, 0, 0, 0, 0)
#ploting the pie chart
plt.pie(medal_data,            #data to plot
        labels=country_data,   #labels for each slice
        explode=explode,      #explode out the slices
        colors=colors,        #colors for each slice
        autopct='%1.1f%%',    #display percentage on each slice
        shadow=True,          #add shadow to the pie chart
        startangle=140        #start angle for the first slice
        )
#add title to the plot
plt.title("Gold medal achievements of five most successful\n" + "countries in 2016 Summer Olympics")
plt.show()

import matplotlib.pyplot as plt
#defining data
math_marks = [88, 92, 80, 89, 100, 80, 60, 100, 80, 34]
science_marks = [35, 79, 79, 48, 100, 88, 32, 45, 20, 30]
marks_range = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
#ploting scatter plot for math marks
plt.scatter(marks_range, math_marks, label='Math marks', color='r')
#ploting scatter plot for science marks
plt.scatter(marks_range, science_marks, label='Science marks', color='g')
#adding title and labels
plt.title('Scatter Plot')
plt.xlabel('Marks Range')
plt.ylabel('Marks Scored')
#adding legend to differentiate between math and science marks
plt.legend()
plt.show()